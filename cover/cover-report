#!/usr/bin/env escript
%% -*- erlang-indent-level: 2 -*-
%%! +S1 -nostick -noshell -pa ../ebin

main([CoverDir]) ->
  {ok, Files} = file:list_dir(CoverDir),
  Full = [filename:join([CoverDir,F]) || F <- Files],
  case os:getenv("TRAVIS") of
    "true" ->
      _ = coveralls:module_info(),
      JobId = os:getenv("TRAVIS_JOB_ID"),
      coveralls:convert_and_send_file(Full, JobId, "travis-ci", "");
    _ ->
      Foreach = fun(F) -> cover:import(F) end,
      lists:foreach(Foreach, Full),
      Foreach2 = fun(M) -> cover:analyse_to_file(M, [html]) end,
      lists:foreach(Foreach2, cover:imported_modules())
  end,
  {result, Result, _} = cover:analyse(coverage, module),
  print(Result).

print(List) ->

  %% THRESHOLDS
  ThresholdSingle = 0.75,
  Threshold = 0.92,

  %% HEADER
  to_stderr("~-30s | ~5s | ~6s | ~5s~n", ["Module", "Lines", "NotCov", "Cov %"]),
  print_separator(),

  AddPointerSuffix =
    fun(true) -> "  <--";
       (false) -> ""
    end,

  Fold =
    fun({Mod, {Cov, NotCov}}, {Fail, TotSum, CovSum}) ->
        Tot = Cov + NotCov,
        Pct = Cov / Tot,
        Fails = Pct < ThresholdSingle,
        %% PER MODULE ENTRY
        to_stderr(
          "~-30s | ~5w | ~6w | ~5.1f~s~n",
          [Mod, Tot, NotCov, Pct * 100, AddPointerSuffix(Fails)]),
        {Fail orelse Fails, TotSum + Tot, CovSum + Cov}
    end,
  {Fail, TotSum, CovSum} = lists:foldl(Fold, {false, 0,0}, List),
  Pct = CovSum / TotSum,
  TotalFail = Pct < Threshold,
  %% FOOTER
  print_separator(),
  to_stderr("~-30s   ~5w   ~6w   ~5.1f~s~n",
            ["Total", TotSum, CovSum, Pct * 100, AddPointerSuffix(TotalFail)]),
  case Fail of
    false -> ok;
    true ->
      to_stderr(
        "~nFail: Code coverage for some module(s) is below ~.1f% threshold!~n",
        [ThresholdSingle * 100])
  end,
  case TotalFail of
    false -> ok;
    true ->
      to_stderr(
        "~nFail: Total code coverage is below ~.1f% threshold!~n",
        [Threshold * 100])
  end,
  case os:getenv("TRAVIS") of
    "true" ->
      halt(0);
    _ ->
      case Fail orelse TotalFail of
        true -> halt(1);
        false -> halt(0)
      end
  end.

print_separator() ->
  to_stderr("~s~n", [[$- || _ <- lists:seq(1, 55)]]).

to_stderr(Format, Args) ->
  io:format(standard_error, Format, Args).
